---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-app
  namespace: default
  labels:
    app: postgres-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-app
  template:
    metadata:
      labels:
        app: postgres-app
    spec:
      containers:
        - name: postgres
          image: postgres:13-alpine
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: "testdb"
            - name: POSTGRES_USER
              value: "testuser"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: password
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - testuser
                - -d
                - testdb
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - testuser
                - -d
                - testdb
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: init-sql
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: postgres-storage
          emptyDir: {}
        - name: init-sql
          configMap:
            name: postgres-init

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: default
type: Opaque
data:
  password: <BASE64_ENCODED_PASSWORD> # password123 base64 encoded

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: default
data:
  01-init.sql: |
    -- Create sample tables and data for testing

    CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS products (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        price DECIMAL(10,2) NOT NULL,
        description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS orders (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id),
        product_id INTEGER REFERENCES products(id),
        quantity INTEGER NOT NULL DEFAULT 1,
        total_price DECIMAL(10,2) NOT NULL,
        order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Insert sample data
    INSERT INTO users (username, email) VALUES 
        ('john_doe', 'john@example.com'),
        ('jane_smith', 'jane@example.com'),
        ('admin_user', 'admin@example.com')
    ON CONFLICT DO NOTHING;

    INSERT INTO products (name, price, description) VALUES 
        ('Laptop', 999.99, 'High-performance laptop'),
        ('Mouse', 29.99, 'Wireless computer mouse'),
        ('Keyboard', 79.99, 'Mechanical gaming keyboard'),
        ('Monitor', 299.99, '27-inch 4K monitor'),
        ('Headphones', 199.99, 'Noise-cancelling headphones')
    ON CONFLICT DO NOTHING;

    INSERT INTO orders (user_id, product_id, quantity, total_price) VALUES 
        (1, 1, 1, 999.99),
        (1, 2, 2, 59.98),
        (2, 3, 1, 79.99),
        (2, 4, 1, 299.99),
        (3, 5, 1, 199.99)
    ON CONFLICT DO NOTHING;

    -- Create a view for order details
    CREATE OR REPLACE VIEW order_details AS
    SELECT 
        o.id as order_id,
        u.username,
        u.email,
        p.name as product_name,
        p.price as unit_price,
        o.quantity,
        o.total_price,
        o.order_date
    FROM orders o
    JOIN users u ON o.user_id = u.id
    JOIN products p ON o.product_id = p.id;

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: default
  labels:
    app: postgres-app
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgres
  selector:
    app: postgres-app

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
  namespace: default
  labels:
    app: pgadmin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
        - name: pgadmin
          image: dpage/pgadmin4:latest
          ports:
            - containerPort: 80
          env:
            - name: PGADMIN_DEFAULT_EMAIL
              value: "admin@example.com"
            - name: PGADMIN_DEFAULT_PASSWORD
              value: "admin123"
            - name: PGADMIN_DISABLE_POSTFIX
              value: "true"
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "300m"

---
apiVersion: v1
kind: Service
metadata:
  name: pgadmin-service
  namespace: default
  labels:
    app: pgadmin
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app: pgadmin
